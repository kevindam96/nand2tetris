// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        DMux (in=load, sel=address[14], a=loadRAM16K, b=loadScreen);
        RAM16K (in=in, load=loadRAM16K, address=address[0..13], out=outRAM16K);
        Screen (in=in, load=loadScreen, address=address[0..12], out=outScreen);
        And (a=address[13], b=address[14], out=address13Andaddress14);
        Or8Way (in=address[0..7], out=Or8Wayaddress0thru7);
        Or (a=Or8Wayaddress0thru7, b=address[8], out=OrNWayaddress0thru8);
        Or (a=OrNWayaddress0thru8, b=address[9], out=OrNWayaddress0thru9);
        Or (a=OrNWayaddress0thru9, b=address[10], out=OrNWayaddress0thru10);
        Or (a=OrNWayaddress0thru10, b=address[11], out=OrNWayaddress0thru11);
        Or (a=OrNWayaddress0thru11, b=address[12], out=OrNWayaddress0thru12);
        Not (in=OrNWayaddress0thru12, out=NotOrNWayaddress0thru12);
        And (a=address13Andaddress14, b=NotOrNWayaddress0thru12, out=address13Andaddress14AndNotOrNWayaddress0thru12);
        Keyboard (out=outKeyboard);
        Mux16 (a=outScreen, b=outKeyboard, sel=address13Andaddress14AndNotOrNWayaddress0thru12, out=outScreenMux16outKeyboard);
        Mux16 (a=outRAM16K, b=outScreenMux16outKeyboard, sel=address[14], out=out);
}
